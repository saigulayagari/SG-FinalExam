# -*- coding: utf-8 -*-
"""SG_Finalexam_OPM6000.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O2JLLDgQuQtXsI0x-SuZwOE_QgXRe6oP

# 0.1 Mount Google Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# 0.2 Import Libraries"""

import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.holtwinters import SimpleExpSmoothing, ExponentialSmoothing
from prophet import Prophet
from datetime import timedelta

"""# Task 1: Data Loading and Transformation

## 1.1 Load Data
"""

file_path = '/content/drive/MyDrive/OPM6000/Finalexam'
file_names = [
    "Tomatoes.csv", "Sorghum.csv", "Potatoes (Irish).csv", "Peas (fresh).csv",
    "Oranges (big size).csv", "Maize.csv", "Chili (red).csv", "Cassava.csv", "Beans (dry).csv"
]
dataframes = [pd.read_csv(os.path.join(file_path, file)) for file in file_names]

"""## 1.2 Consolidate Date Column"""

def consolidate_date(df):
    df['mp_month'] = df['mp_month'].astype(str).str.zfill(2)
    df['mp_year'] = df['mp_year'].astype(str)
    df['Date'] = pd.to_datetime(df['mp_year'] + '-' + df['mp_month'], format='%Y-%m')
    df.drop(['mp_year', 'mp_month'], axis=1, inplace=True)
    return df

dataframes = [consolidate_date(df) for df in dataframes]

"""## 1.3 Create Combined "Good" Column"""

def add_combined_column(df):
    df['good'] = df['mkt_name'] + '_' + df['cm_name']
    return df

dataframes = [add_combined_column(df) for df in dataframes]

"""## 1.4 Combine All DataFrames"""

combined_df = pd.concat(dataframes)
combined_df = combined_df.pivot(index='Date', columns='good', values='mp_price')

"""# Task 2: Data Analysis

## 2.1 Data Overview
"""

print(combined_df.shape)
print(combined_df.info())
print(combined_df.dtypes)

"""## 2.2 Check Date Continuity"""

def check_date_continuity(df):
    date_range = pd.date_range(start=df.index.min(), end=df.index.max(), freq='MS')
    missing_dates = date_range.difference(df.index)
    return missing_dates

missing_dates = check_date_continuity(combined_df)
print("Missing Dates:", missing_dates)

"""## 2.3 Missing Values Summary"""

missing_percentage = combined_df.isnull().sum() * 100 / len(combined_df)
print("Missing Values (%):", missing_percentage)

"""## 2.4 Summary Statistics"""

summary_stats = combined_df.describe().loc[['mean', '50%', 'min', 'max', 'std']].rename(index={'50%': 'median'})
print(summary_stats)

"""## 2.5 Time Series Visualizations"""

for col in combined_df.columns:
    plt.figure(figsize=(12, 6))
    plt.plot(combined_df.index, combined_df[col])
    plt.title(f'Time Series Plot for {col}')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.grid(True)
    plt.show()

"""# Task 3: Missing Data Handling

## 3.1 Fill Missing Values Using Interpolation
"""

filled_df = combined_df.interpolate(method='linear', limit_direction='both')

"""# Task 4: Correlation Analysis"""

correlation_matrix = filled_df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix Heatmap')
plt.show()

# Find highest correlation
correlation_matrix = correlation_matrix.mask(np.eye(correlation_matrix.shape[0], dtype=bool))
max_corr = correlation_matrix.stack().idxmax()
print(f"Highest Correlation: {max_corr} -> {correlation_matrix.loc[max_corr]}")

"""# Task 5: Forecasting

## 5.1 Moving Averages
"""

filled_df['Tomatoes_MA_3M'] = filled_df['Rwamagana_Tomatoes'].rolling(window=3).mean()
filled_df['Tomatoes_MA_6M'] = filled_df['Rwamagana_Tomatoes'].rolling(window=6).mean()

"""## 5.2 ARIMA Forecasting"""

arima_model = ARIMA(filled_df['Rwamagana_Tomatoes'], order=(5, 1, 0)).fit()
future_dates = [filled_df.index[-1] + timedelta(days=30 * i) for i in range(1, 7)]
predictions = arima_model.forecast(steps=6)

"""## 5.3 Prophet Forecasting"""

prophet_df = filled_df[['Rwamagana_Tomatoes']].reset_index()
prophet_df.columns = ['ds', 'y']
prophet_model = Prophet().fit(prophet_df)
future = prophet_model.make_future_dataframe(periods=6, freq='MS')
forecast = prophet_model.predict(future)

"""## 5.4 Visualization"""

plt.figure(figsize=(12, 6))
plt.plot(filled_df['Rwamagana_Tomatoes'], label='Actual')
plt.plot(future_dates, predictions, label='ARIMA', linestyle='--')
plt.plot(forecast['ds'], forecast['yhat'], label='Prophet', linestyle=':')
plt.legend()
plt.show()